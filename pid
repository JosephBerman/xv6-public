    if(p->state == UNUSED)
  p->state = EMBRYO;
  p->pid = nextpid++;
  if((p->kstack = kalloc()) == 0){
    p->state = UNUSED;
  sp = p->kstack + KSTACKSIZE;
  sp -= sizeof *p->tf;
  p->tf = (struct trapframe*)sp;
  sp -= sizeof *p->context;
  p->context = (struct context*)sp;
  memset(p->context, 0, sizeof *p->context);
  p->context->eip = (uint)forkret;
  if((p->pgdir = setupkvm()) == 0)
  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
  p->sz = PGSIZE;
  memset(p->tf, 0, sizeof(*p->tf));
  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
  p->tf->es = p->tf->ds;
  p->tf->ss = p->tf->ds;
  p->tf->eflags = FL_IF;
  p->tf->esp = PGSIZE;
  p->tf->eip = 0;  // beginning of initcode.S
  safestrcpy(p->name, "initcode", sizeof(p->name));
  p->cwd = namei("/");
  // this assignment to p->state lets other cores
  p->state = RUNNABLE;
  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
    kfree(np->kstack);
    np->kstack = 0;
    np->state = UNUSED;
  np->sz = curproc->sz;
  np->parent = curproc;
  *np->tf = *curproc->tf;
  np->tf->eax = 0;
      np->ofile[i] = filedup(curproc->ofile[i]);
  np->cwd = idup(curproc->cwd);
  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
  pid = np->pid;
  np->state = RUNNABLE;
    if(p->parent == curproc){
      p->parent = initproc;
      if(p->state == ZOMBIE)
      if(p->parent != curproc)
      if(p->state == ZOMBIE){
        pid = p->pid;
        kfree(p->kstack);
        p->kstack = 0;
        freevm(p->pgdir);
        p->pid = 0;
        p->parent = 0;
        p->name[0] = 0;
        p->killed = 0;
        p->state = UNUSED;
      if(p->state != RUNNABLE)
      p->state = RUNNING;
      swtch(&(c->scheduler), p->context);
      // It should have changed its p->state before coming back.
  if(p->state == RUNNING)
  swtch(&p->context, mycpu()->scheduler);
  // change p->state and then call sched.
  p->chan = chan;
  p->state = SLEEPING;
  p->chan = 0;
    if(p->state == SLEEPING && p->chan == chan)
      p->state = RUNNABLE;
    if(p->state != UNUSED)
    if(p->pid == pid){
      p->killed = 1;
      if(p->state == SLEEPING)
        p->state = RUNNABLE;
    if(p->state == UNUSED)
    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
      state = states[p->state];
    cprintf("%d %s %s", p->pid, state, p->name);
    if(p->state == SLEEPING){
      getcallerpcs((uint*)p->context->ebp+2, pc);
